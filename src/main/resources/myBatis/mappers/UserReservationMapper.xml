<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.btc.swimpyo.backend.mappers.reservation.user.IUserReservationDaoMapper">
    <!-- Room 정보 가져오기 -->
    <select id="selectRoomInfo" parameterType="com.btc.swimpyo.backend.dto.reservation.ReservationDto" resultType="com.btc.swimpyo.backend.dto.reservation.ReservationDto">
        SELECT
            ar.a_r_no, ar.a_acc_no, ar.a_r_name, ar.a_r_state, ar.a_r_price, ar.a_r_check_in, ar.a_r_check_out, aa.a_acc_name
        FROM
            tbl_admin_room ar
            join
                tbl_admin_accommodation aa
            on
                ar.a_acc_no = aa.a_acc_no
        WHERE
            ar.a_r_no = #{a_r_no}
        AND
            ar.use_yn = 'Y'
    </select>

   <!--  숙박 - 이미 예약된 방만 찾기
    <select id="searchDate" parameterType="com.btc.swimpyo.backend.dto.reservation.ReservationDto" resultType="Integer">
        SELECT
            COUNT(*)
        FROM
            tbl_user_reservation
        WHERE
            a_r_no = #{a_r_no}
        AND
            u_r_check_out <![CDATA[>]]> #{u_r_check_in}
        AND
            u_r_check_in <![CDATA[<=]]> #{u_r_check_in}
        AND
            (u_r_check_in AND u_r_check_out) <![CDATA[>]]> #{u_r_check_out}
    </select>
-->

    <select id="searchDate" parameterType="com.btc.swimpyo.backend.dto.reservation.ReservationDto" resultType="Integer">
        SELECT
            COUNT(*)
        FROM
            tbl_user_reservation
        WHERE
            a_r_no = #{a_r_no}
        AND
            (
            (u_r_check_in <![CDATA[>=]]> #{u_r_check_in} AND u_r_check_in <![CDATA[<]]> #{u_r_check_out})
            OR
            (u_r_check_out <![CDATA[>]]> #{u_r_check_in} AND u_r_check_out <![CDATA[<=]]> #{u_r_check_out})
            OR
            (u_r_check_in <![CDATA[<=]]> #{u_r_check_in} AND u_r_check_out <![CDATA[>=]]> #{u_r_check_out})
            )
        AND
            pay_yn = 'Y'
    </select>

    <!-- 대실 - 이미 예약된 방만 찾기 -->
    <select id="searchTime" parameterType="com.btc.swimpyo.backend.dto.reservation.ReservationDto" resultType="Integer">
        SELECT
            COUNT(*)
        FROM
            tbl_user_reservation
        WHERE
            a_r_no = #{a_r_no}
        AND
            (
            (u_r_check_in_time <![CDATA[>=]]> #{u_r_check_in_time} AND DATE_SUB(u_r_check_in_time, INTERVAL 1 HOUR) <![CDATA[<]]> #{u_r_check_out_time})
            OR
            (DATE_ADD(u_r_check_out_time, INTERVAL 1 HOUR) <![CDATA[>]]> #{u_r_check_in_time} AND u_r_check_out_time <![CDATA[<=]]> #{u_r_check_out_time})
            OR
            (u_r_check_in_time <![CDATA[<=]]> #{u_r_check_in_time} AND u_r_check_out_time <![CDATA[>=]]> #{u_r_check_out_time})
            )
        AND
            pay_yn = 'Y'
    </select>

    <!-- 예약 정보 db에 저장(숙박) -->
    <insert id="insertRsvInfo" parameterType="com.btc.swimpyo.backend.dto.reservation.ReservationDto">
        insert into
            tbl_user_reservation(tid,
                                 u_m_email,
                                 a_r_no,
                                 u_r_check_in,
                                 u_r_check_out,
                                 u_r_car_yn,
                                 u_r_stay_yn,
                                 u_r_name,
                                 u_r_phone,
                                 u_r_reg_date)
        values (#{tid},
                #{u_m_email},
                #{a_r_no},
                #{u_r_check_in},
                #{u_r_check_out},
                #{u_r_car_yn},
                #{u_r_stay_yn},
                #{u_r_name},
                #{u_r_phone},
                NOW())
    </insert>


    <!-- 예약 정보 db에 저장(대실) -->
    <insert id="insertRsvInfoByMoment" parameterType="com.btc.swimpyo.backend.dto.reservation.ReservationDto">
        insert into
        tbl_user_reservation(tid,
                             u_m_email,
                             a_r_no,
                             u_r_check_in,
                             u_r_check_out,
                             u_r_check_in_time,
                             u_r_check_out_time,
                             u_r_car_yn,
                             u_r_stay_yn,
                             u_r_name,
                             u_r_phone,
                             u_r_reg_date)
        values (#{tid},
                #{u_m_email},
                #{a_r_no},
                NOW(),
                NOW(),
                #{u_r_check_in_time},
                #{u_r_check_out_time},
                #{u_r_car_yn},
                #{u_r_stay_yn},
                #{u_r_name},
                #{u_r_phone},
                NOW())
    </insert>

    <!-- [카카오페이] tid, next_redirect_pc_url 등 db에 저장 -->
    <insert id="insertKakaoPayReady" parameterType="com.btc.swimpyo.backend.dto.kakaoPay.KakaoReadyResponseDto">
        insert into tbl_kakao_ready(tid,
                                    next_redirect_pc_url,
                                    created_at,
                                    partner_order_id,
                                    partner_user_id,
                                    item_name,
                                    cid)
        values (#{tid},
                #{next_redirect_pc_url},
                #{created_at},
                #{partner_order_id},
                #{partner_user_id},
                #{item_name},
                #{cid})
    </insert>

    <!-- 가격 정보 db에 저장 -->
    <insert id="insertAmount" parameterType="com.btc.swimpyo.backend.dto.kakaoPay.KakaoReadyResponseDto">
        insert into tbl_amount(tid, total, tax_free, tax, point, discount, green_deposit)
        values (#{tid}, #{total}, #{tax_free}, #{tax}, #{point}, #{discount}, #{green_deposit})
    </insert>

    <!-- u_r_no 가져오기 -->
    <select id="selectRsvNo" parameterType="com.btc.swimpyo.backend.dto.reservation.ReservationDto" resultType="Integer">
        select
        max(u_r_no)
        from
        tbl_user_reservation
        where
        u_m_email = #{u_m_email}
    </select>

    <!-- tid 값 tbl_user_reservation에 넣기 -->
    <update id="updateRsvTid" parameterType="com.btc.swimpyo.backend.dto.reservation.ReservationDto">
        UPDATE
            tbl_user_reservation
        SET
            tid = #{tid}
        WHERE
            u_m_email = #{u_m_email}
        and
            u_r_no = #{u_r_no}
    </update>

    <!-- pg_token db에 저장 -->
<!--    <insert id="insertPgToken" parameterType="String">-->
<!--        update tbl_user_reservation-->
<!--        set pg_token = #{pg_token}-->
<!--        where-->
<!--        tid = select-->
<!--    </insert>-->
    
    <!-- tbl_kakao_ready에 저장된 값들 들고오기 -->
    <select id="selectKakaoReadyInfo" parameterType="String" resultType="com.btc.swimpyo.backend.dto.kakaoPay.KakaoReadyResponseDto">
        SELECT  tid,
                next_redirect_pc_url,
                created_at,
                partner_order_id,
                partner_user_id,
                item_name,
                cid
        FROM
            tbl_kakao_ready
        WHERE
            partner_order_id = #{partner_order_id}
        AND
            created_at = (SELECT MAX(created_at) FROM tbl_kakao_ready)
    </select>

    <!-- [카카오페이] 승인시 받은 데이터 저장 -->
    <insert id="insertKakaoPayApprove" parameterType="com.btc.swimpyo.backend.dto.kakaoPay.KakaoApproveResponseDto">
        insert into tbl_pay_approval(aid,
                                     tid,
                                     cid,
                                     sid,
                                     partner_order_id,
                                     partner_user_id,
                                     payment_method_type,
                                     item_name,
                                     item_code,
                                     quantity,
                                     created_at,
                                     approved_at,
                                     payload)
        values (#{aid},
                #{tid},
                #{cid},
                #{sid},
                #{partner_order_id},
                #{partner_user_id},
                #{payment_method_type},
                #{item_name},
                #{item_code},
                #{quantity},
                #{created_at},
                #{approved_at},
                #{payload})
    </insert>

    <!-- 결제 완료시 pay_yn 값 바꾸기 -->
    <update id="updateRsvpayYN" parameterType="com.btc.swimpyo.backend.dto.reservation.ReservationDto">
        update
            tbl_user_reservation
        set
            pay_yn = 'Y'
        WHERE
            u_r_no = #{u_r_no}
        AND
            u_m_email = #{u_m_email}
    </update>

    <!-- 환불 - 삭제할 예약번호 받아오기 -->
    <select id="selectRsvNoForDel" parameterType="Integer" resultType="com.btc.swimpyo.backend.dto.reservation.ReservationDto">
        SELECT
            u_r_no, u_m_email
        FROM
            tbl_user_reservation
        WHERE
            u_r_no = #{deleteRsvNo}
    </select>

    <!-- 환불 - 삭제할 amount 정보 가져오기 -->
    <select id="selectAmount" parameterType="com.btc.swimpyo.backend.dto.kakaoPay.KakaoApproveResponseDto" resultType="com.btc.swimpyo.backend.dto.kakaoPay.AmountDto">
        SELECT
            total, tax_free, tax
        FROM
            tbl_amount
        WHERE
            tid = #{tid}
    </select>

    <!-- 환불 - 삭제할 cid 가져오기 -->
    <select id="selectCid" parameterType="com.btc.swimpyo.backend.dto.kakaoPay.KakaoApproveResponseDto" resultType="String">
        SELECT
            cid
        FROM
            tbl_pay_approval
        WHERE
            tid = #{tid}
    </select>

    <!-- 환불 - db삭제 -->
    <update id="deleteRsvInfo" parameterType="com.btc.swimpyo.backend.dto.reservation.ReservationDto">
        UPDATE tbl_user_reservation SET use_yn = 'N' WHERE u_r_no = #{u_r_no} AND u_m_email = #{u_m_email};
    </update>

    <!-- 환불 - 결제 정보 삭제 -->
    <delete id="deletePayReady" parameterType="com.btc.swimpyo.backend.dto.kakaoPay.KakaoApproveResponseDto">
        delete from tbl_kakao_ready where tid = #{tid};
    </delete>
    <delete id="deletePayApproval" parameterType="com.btc.swimpyo.backend.dto.kakaoPay.KakaoApproveResponseDto">
        delete from tbl_pay_approval where tid = #{tid};
    </delete>
    <delete id="deletePayAmount" parameterType="com.btc.swimpyo.backend.dto.kakaoPay.KakaoApproveResponseDto">
        delete from tbl_amount where tid = #{tid};
    </delete>
</mapper>